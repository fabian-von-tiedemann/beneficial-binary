//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blog_mdx: Blog_Mdx;
  blog_mdxConnection: Blog_MdxConnection;
  blog_md: Blog_Md;
  blog_mdConnection: Blog_MdConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlog_MdxArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlog_MdxConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Blog_MdxFilter>;
};


export type QueryBlog_MdArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlog_MdConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Blog_MdFilter>;
};

export type DocumentFilter = {
  blog_mdx?: InputMaybe<Blog_MdxFilter>;
  blog_md?: InputMaybe<Blog_MdFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Blog_Mdx | Blog_Md | Folder;

export type Blog_Mdx = Node & Document & {
  __typename?: 'Blog_mdx';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  pubDate?: Maybe<Scalars['String']['output']>;
  updatedDate?: Maybe<Scalars['String']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Blog_MdxFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  updatedDate?: InputMaybe<DatetimeFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Blog_MdxConnectionEdges = {
  __typename?: 'Blog_mdxConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog_Mdx>;
};

export type Blog_MdxConnection = Connection & {
  __typename?: 'Blog_mdxConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Blog_MdxConnectionEdges>>>;
};

export type Blog_Md = Node & Document & {
  __typename?: 'Blog_md';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  pubDate?: Maybe<Scalars['String']['output']>;
  updatedDate?: Maybe<Scalars['String']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Blog_MdFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  updatedDate?: InputMaybe<DatetimeFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Blog_MdConnectionEdges = {
  __typename?: 'Blog_mdConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog_Md>;
};

export type Blog_MdConnection = Connection & {
  __typename?: 'Blog_mdConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Blog_MdConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateBlog_mdx: Blog_Mdx;
  createBlog_mdx: Blog_Mdx;
  updateBlog_md: Blog_Md;
  createBlog_md: Blog_Md;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateBlog_MdxArgs = {
  relativePath: Scalars['String']['input'];
  params: Blog_MdxMutation;
};


export type MutationCreateBlog_MdxArgs = {
  relativePath: Scalars['String']['input'];
  params: Blog_MdxMutation;
};


export type MutationUpdateBlog_MdArgs = {
  relativePath: Scalars['String']['input'];
  params: Blog_MdMutation;
};


export type MutationCreateBlog_MdArgs = {
  relativePath: Scalars['String']['input'];
  params: Blog_MdMutation;
};

export type DocumentUpdateMutation = {
  blog_mdx?: InputMaybe<Blog_MdxMutation>;
  blog_md?: InputMaybe<Blog_MdMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  blog_mdx?: InputMaybe<Blog_MdxMutation>;
  blog_md?: InputMaybe<Blog_MdMutation>;
};

export type Blog_MdxMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  updatedDate?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Blog_MdMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  updatedDate?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Blog_MdxPartsFragment = { __typename: 'Blog_mdx', title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null };

export type Blog_MdPartsFragment = { __typename: 'Blog_md', title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null };

export type Blog_MdxQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Blog_MdxQuery = { __typename?: 'Query', blog_mdx: { __typename: 'Blog_mdx', id: string, title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Blog_MdxConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Blog_MdxFilter>;
}>;


export type Blog_MdxConnectionQuery = { __typename?: 'Query', blog_mdxConnection: { __typename?: 'Blog_mdxConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Blog_mdxConnectionEdges', cursor: string, node?: { __typename: 'Blog_mdx', id: string, title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Blog_MdQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Blog_MdQuery = { __typename?: 'Query', blog_md: { __typename: 'Blog_md', id: string, title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Blog_MdConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Blog_MdFilter>;
}>;


export type Blog_MdConnectionQuery = { __typename?: 'Query', blog_mdConnection: { __typename?: 'Blog_mdConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Blog_mdConnectionEdges', cursor: string, node?: { __typename: 'Blog_md', id: string, title: string, description?: string | null, pubDate?: string | null, updatedDate?: string | null, heroImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const Blog_MdxPartsFragmentDoc = gql`
    fragment Blog_mdxParts on Blog_mdx {
  __typename
  title
  description
  pubDate
  updatedDate
  heroImage
  body
}
    `;
export const Blog_MdPartsFragmentDoc = gql`
    fragment Blog_mdParts on Blog_md {
  __typename
  title
  description
  pubDate
  updatedDate
  heroImage
  body
}
    `;
export const Blog_MdxDocument = gql`
    query blog_mdx($relativePath: String!) {
  blog_mdx(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Blog_mdxParts
  }
}
    ${Blog_MdxPartsFragmentDoc}`;
export const Blog_MdxConnectionDocument = gql`
    query blog_mdxConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Blog_mdxFilter) {
  blog_mdxConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Blog_mdxParts
      }
    }
  }
}
    ${Blog_MdxPartsFragmentDoc}`;
export const Blog_MdDocument = gql`
    query blog_md($relativePath: String!) {
  blog_md(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Blog_mdParts
  }
}
    ${Blog_MdPartsFragmentDoc}`;
export const Blog_MdConnectionDocument = gql`
    query blog_mdConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Blog_mdFilter) {
  blog_mdConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Blog_mdParts
      }
    }
  }
}
    ${Blog_MdPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      blog_mdx(variables: Blog_MdxQueryVariables, options?: C): Promise<{data: Blog_MdxQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdxQueryVariables, query: string}> {
        return requester<{data: Blog_MdxQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdxQueryVariables, query: string}, Blog_MdxQueryVariables>(Blog_MdxDocument, variables, options);
      },
    blog_mdxConnection(variables?: Blog_MdxConnectionQueryVariables, options?: C): Promise<{data: Blog_MdxConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdxConnectionQueryVariables, query: string}> {
        return requester<{data: Blog_MdxConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdxConnectionQueryVariables, query: string}, Blog_MdxConnectionQueryVariables>(Blog_MdxConnectionDocument, variables, options);
      },
    blog_md(variables: Blog_MdQueryVariables, options?: C): Promise<{data: Blog_MdQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdQueryVariables, query: string}> {
        return requester<{data: Blog_MdQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdQueryVariables, query: string}, Blog_MdQueryVariables>(Blog_MdDocument, variables, options);
      },
    blog_mdConnection(variables?: Blog_MdConnectionQueryVariables, options?: C): Promise<{data: Blog_MdConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdConnectionQueryVariables, query: string}> {
        return requester<{data: Blog_MdConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Blog_MdConnectionQueryVariables, query: string}, Blog_MdConnectionQueryVariables>(Blog_MdConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  